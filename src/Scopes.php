<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace formance\formance;

class Scopes 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Add a transient scope to a scope
     * 
     * Add a transient scope to a scope
     * 
     * @param \formance\formance\Models\Operations\AddTransientScopeRequest $request
     * @return \formance\formance\Models\Operations\AddTransientScopeResponse
     */
	public function addTransientScope(
        ?\formance\formance\Models\Operations\AddTransientScopeRequest $request,
    ): \formance\formance\Models\Operations\AddTransientScopeResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/scopes/{scopeId}/transient/{transientScopeId}', \formance\formance\Models\Operations\AddTransientScopeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \formance\formance\Models\Operations\AddTransientScopeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create scope
     * 
     * Create scope
     * 
     * @param \formance\formance\Models\Shared\CreateScopeRequest $request
     * @return \formance\formance\Models\Operations\CreateScopeResponse
     */
	public function createScope(
        ?\formance\formance\Models\Shared\CreateScopeRequest $request,
    ): \formance\formance\Models\Operations\CreateScopeResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/scopes');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \formance\formance\Models\Operations\CreateScopeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createScopeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'formance\formance\Models\Shared\CreateScopeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete scope
     * 
     * Delete scope
     * 
     * @param \formance\formance\Models\Operations\DeleteScopeRequest $request
     * @return \formance\formance\Models\Operations\DeleteScopeResponse
     */
	public function deleteScope(
        ?\formance\formance\Models\Operations\DeleteScopeRequest $request,
    ): \formance\formance\Models\Operations\DeleteScopeResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/scopes/{scopeId}', \formance\formance\Models\Operations\DeleteScopeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \formance\formance\Models\Operations\DeleteScopeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a transient scope from a scope
     * 
     * Delete a transient scope from a scope
     * 
     * @param \formance\formance\Models\Operations\DeleteTransientScopeRequest $request
     * @return \formance\formance\Models\Operations\DeleteTransientScopeResponse
     */
	public function deleteTransientScope(
        ?\formance\formance\Models\Operations\DeleteTransientScopeRequest $request,
    ): \formance\formance\Models\Operations\DeleteTransientScopeResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/scopes/{scopeId}/transient/{transientScopeId}', \formance\formance\Models\Operations\DeleteTransientScopeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \formance\formance\Models\Operations\DeleteTransientScopeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List scopes
     * 
     * List Scopes
     * 
     * @return \formance\formance\Models\Operations\ListScopesResponse
     */
	public function listScopes(
    ): \formance\formance\Models\Operations\ListScopesResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/scopes');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \formance\formance\Models\Operations\ListScopesResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listScopesResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'formance\formance\Models\Shared\ListScopesResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Read scope
     * 
     * Read scope
     * 
     * @param \formance\formance\Models\Operations\ReadScopeRequest $request
     * @return \formance\formance\Models\Operations\ReadScopeResponse
     */
	public function readScope(
        ?\formance\formance\Models\Operations\ReadScopeRequest $request,
    ): \formance\formance\Models\Operations\ReadScopeResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/scopes/{scopeId}', \formance\formance\Models\Operations\ReadScopeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \formance\formance\Models\Operations\ReadScopeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->readScopeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'formance\formance\Models\Shared\ReadScopeResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update scope
     * 
     * Update scope
     * 
     * @param \formance\formance\Models\Operations\UpdateScopeRequest $request
     * @return \formance\formance\Models\Operations\UpdateScopeResponse
     */
	public function updateScope(
        ?\formance\formance\Models\Operations\UpdateScopeRequest $request,
    ): \formance\formance\Models\Operations\UpdateScopeResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/scopes/{scopeId}', \formance\formance\Models\Operations\UpdateScopeRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateScopeRequest", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = sprintf('speakeasy-sdk/%s %s %s %s', $this->sdkConfiguration->language, $this->sdkConfiguration->sdkVersion, $this->sdkConfiguration->genVersion, $this->sdkConfiguration->openapiDocVersion);
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $response = new \formance\formance\Models\Operations\UpdateScopeResponse();
        $response->statusCode = $httpResponse->getStatusCode();
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateScopeResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'formance\formance\Models\Shared\UpdateScopeResponse', 'json');
            }
        }

        return $response;
    }
}