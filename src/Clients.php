<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace formance\formance;

class Clients 
{

	private SDKConfiguration $sdkConfiguration;

	/**
	 * @param SDKConfiguration $sdkConfig
	 */
	public function __construct(SDKConfiguration $sdkConfig)
	{
		$this->sdkConfiguration = $sdkConfig;
	}
	
    /**
     * Add scope to client
     * 
     * @param \formance\formance\Models\Operations\AddScopeToClientRequest $request
     * @return \formance\formance\Models\Operations\AddScopeToClientResponse
     */
	public function addScopeToClient(
        ?\formance\formance\Models\Operations\AddScopeToClientRequest $request,
    ): \formance\formance\Models\Operations\AddScopeToClientResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/clients/{clientId}/scopes/{scopeId}', \formance\formance\Models\Operations\AddScopeToClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \formance\formance\Models\Operations\AddScopeToClientResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Create client
     * 
     * @param \formance\formance\Models\Shared\CreateClientRequest $request
     * @return \formance\formance\Models\Operations\CreateClientResponse
     */
	public function createClient(
        ?\formance\formance\Models\Shared\CreateClientRequest $request,
    ): \formance\formance\Models\Operations\CreateClientResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/clients');
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "request", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \formance\formance\Models\Operations\CreateClientResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 201) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createClientResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'formance\formance\Models\Shared\CreateClientResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Add a secret to a client
     * 
     * @param \formance\formance\Models\Operations\CreateSecretRequest $request
     * @return \formance\formance\Models\Operations\CreateSecretResponse
     */
	public function createSecret(
        ?\formance\formance\Models\Operations\CreateSecretRequest $request,
    ): \formance\formance\Models\Operations\CreateSecretResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/clients/{clientId}/secrets', \formance\formance\Models\Operations\CreateSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "createSecretRequest", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('POST', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \formance\formance\Models\Operations\CreateSecretResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->createSecretResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'formance\formance\Models\Shared\CreateSecretResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Delete client
     * 
     * @param \formance\formance\Models\Operations\DeleteClientRequest $request
     * @return \formance\formance\Models\Operations\DeleteClientResponse
     */
	public function deleteClient(
        ?\formance\formance\Models\Operations\DeleteClientRequest $request,
    ): \formance\formance\Models\Operations\DeleteClientResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/clients/{clientId}', \formance\formance\Models\Operations\DeleteClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \formance\formance\Models\Operations\DeleteClientResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete scope from client
     * 
     * @param \formance\formance\Models\Operations\DeleteScopeFromClientRequest $request
     * @return \formance\formance\Models\Operations\DeleteScopeFromClientResponse
     */
	public function deleteScopeFromClient(
        ?\formance\formance\Models\Operations\DeleteScopeFromClientRequest $request,
    ): \formance\formance\Models\Operations\DeleteScopeFromClientResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/clients/{clientId}/scopes/{scopeId}', \formance\formance\Models\Operations\DeleteScopeFromClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \formance\formance\Models\Operations\DeleteScopeFromClientResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * Delete a secret from a client
     * 
     * @param \formance\formance\Models\Operations\DeleteSecretRequest $request
     * @return \formance\formance\Models\Operations\DeleteSecretResponse
     */
	public function deleteSecret(
        ?\formance\formance\Models\Operations\DeleteSecretRequest $request,
    ): \formance\formance\Models\Operations\DeleteSecretResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/clients/{clientId}/secrets/{secretId}', \formance\formance\Models\Operations\DeleteSecretRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = '*/*';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('DELETE', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \formance\formance\Models\Operations\DeleteSecretResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 204) {
        }

        return $response;
    }
	
    /**
     * List clients
     * 
     * @return \formance\formance\Models\Operations\ListClientsResponse
     */
	public function listClients(
    ): \formance\formance\Models\Operations\ListClientsResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/clients');
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \formance\formance\Models\Operations\ListClientsResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->listClientsResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'formance\formance\Models\Shared\ListClientsResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Read client
     * 
     * @param \formance\formance\Models\Operations\ReadClientRequest $request
     * @return \formance\formance\Models\Operations\ReadClientResponse
     */
	public function readClient(
        ?\formance\formance\Models\Operations\ReadClientRequest $request,
    ): \formance\formance\Models\Operations\ReadClientResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/clients/{clientId}', \formance\formance\Models\Operations\ReadClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('GET', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \formance\formance\Models\Operations\ReadClientResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->readClientResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'formance\formance\Models\Shared\ReadClientResponse', 'json');
            }
        }

        return $response;
    }
	
    /**
     * Update client
     * 
     * @param \formance\formance\Models\Operations\UpdateClientRequest $request
     * @return \formance\formance\Models\Operations\UpdateClientResponse
     */
	public function updateClient(
        ?\formance\formance\Models\Operations\UpdateClientRequest $request,
    ): \formance\formance\Models\Operations\UpdateClientResponse
    {
        $baseUrl = Utils\Utils::templateUrl($this->sdkConfiguration->getServerUrl(), $this->sdkConfiguration->getServerDefaults());
        $url = Utils\Utils::generateUrl($baseUrl, '/api/auth/clients/{clientId}', \formance\formance\Models\Operations\UpdateClientRequest::class, $request);
        
        $options = ['http_errors' => false];
        $body = Utils\Utils::serializeRequestBody($request, "updateClientRequest", "json");
        if ($body !== null) {
            $options = array_merge_recursive($options, $body);
        }
        $options['headers']['Accept'] = 'application/json';
        $options['headers']['user-agent'] = $this->sdkConfiguration->userAgent;
        
        $httpResponse = $this->sdkConfiguration->securityClient->request('PUT', $url, $options);
        
        $contentType = $httpResponse->getHeader('Content-Type')[0] ?? '';

        $statusCode = $httpResponse->getStatusCode();

        $response = new \formance\formance\Models\Operations\UpdateClientResponse();
        $response->statusCode = $statusCode;
        $response->contentType = $contentType;
        $response->rawResponse = $httpResponse;
        
        if ($httpResponse->getStatusCode() === 200) {
            if (Utils\Utils::matchContentType($contentType, 'application/json')) {
                $serializer = Utils\JSON::createSerializer();
                $response->updateClientResponse = $serializer->deserialize((string)$httpResponse->getBody(), 'formance\formance\Models\Shared\UpdateClientResponse', 'json');
            }
        }

        return $response;
    }
}